#################################################################
## Iro
################################################################
##
## * Press Ctrl + '+'/'-' To Zoom in
## * Press Ctrl + S to save and recalculate...
## * Documents are saved to web storage.
## * Only one save slot supported.
## * Matches cannot span lines.
## * Unicode chars must be defined in \u0000 to \uffff format.
## * All matches must be contained by a single group ( ... )
## * Look behinds not permitted, (?<= or (?<!
## * Look forwards are permitted (?= or (?!
## * Constants are defined as __my_const = (......)
## * The \= format allows unescaped regular expressions
## * Constants referenced by match \= $${__my_const}
## * Constants can reference other constants
## * You are free to delete all the default scopes.
## * Twitter : ainslec , Web: http://eeyo.io/iro
##
################################################################
name                   = pagemodellog
file_extensions []     = pmlog, pm_log;
textmate_uuid =  41ff3e9e-d77c-44bc-8c6b-92f358244f94
################################################################
## Constants
################################################################
__LOCATOR_TYPE \= (\^?(className|cssSelector|id|linkText|name|partialLinkText|tagName|xpath))
__ELEMENT_TYPES \= (\S*(Field|Button|Link|Display|FileUpload|Checkbox|DropDown|Select|Radio|Image|Tab|Control|Row|Dialog|Modal|Nav|Section|Component))
__ELEMENT_DISP \=(element\(by\(.*\), found\(.*\)\))( on page \[)(.*)(\])
################################################################
## Styles
################################################################
styles [] {
.comment : style {
   color                 = grey
   italic                = true
   ace_scope             = comment
   textmate_scope        = comment
}
.keyword : style {
   color                 = orange
   ace_scope             = keyword
   textmate_scope        = keyword
}
.component : style {
   color     = violet
   ace_scope = constant.language
   textmate_scope = constant.language
}
.decorator : style {
   color     = gold
   ace_scope = keyword.other.special-method
   textmate_scope = keyword.other.special-method
}
.numeric : style {
   color                 = gold
   ace_scope             = constant.numeric
   textmate_scope        = constant.numeric
}
.elem_disp : style {
   color     = light_blue
   ace_scope             = support.function
   textmate_scope        = support.function
}
.text : style {
   color                 = grey
   ace_scope             = text
   textmate_scope        = text
}
.string : style {
   color                 = light_green
   ace_scope             = string
   textmate_scope        = string
}
.illegal : style {
   color                 = white
   background_color      = red
   ace_scope             = invalid
   textmate_scope        = invalid
}
.type : style {
   color                 = orange
   ace_scope             = support.type
   textmate_scope        = support.type
}
.elementname : style {
   color     = green
   ace_scope             = constant.other
   textmate_scope        = constant.other
}
.variable : style {
   color                 = orange
   ace_scope             = constant.language
   textmate_scope        = constant.language
}
.method : style {
   color                 = green
   ace_scope             = entity.name
   textmate_scope        = entity.name
   }
}
#################################################
## Parse contexts
#################################################
contexts [] {
##############################################
## Main Context - Entry point context
##############################################
main : context {
   : include "numeric" ;
    : pattern {
      regex          \=(Starting test:.*)
      styles []       = .method;
   }
   : pattern {
      regex          \= (^\[[0-9:.]*\] )
      styles []       = .text;
   }
   : pattern {
      regex          \= (Assert|Execute)( javaScript )(\[)(.*)(\])( on page:)(\[)(.*)(\])
      styles []       = .component, .keyword, .text, .string, .text, .text, .text, .keyword, .text;
   }
   : pattern {
      regex          \= (Waiting for page, )(.*)( to display.)
      styles []       = .text, .text, .text;
   }
    : pattern {
      regex          \= (test page model \[)([^\]]*)(\] from page \[)([^\]]*)(\])
      styles []       = .text, .keyword, .text, .keyword, .text;
   }
    : pattern {
      regex          \= (Testing page model \[)([^\]]*)(\] from page \[)([^\]]*)(\])
      styles []       = .text, .keyword, .text, .keyword, .text;
   }
    : pattern {
      regex          \= (Sleeping )([0-9]*)( [a-z]*\.)
      styles []       = .text, .numeric, .text;
   }
    : pattern {
      regex          \= (Refreshing page \[[^\]]*\] after wait.)
      styles []       = .text;
   }
    : pattern {
      regex          \= (Inserting <div id='refresh-.*'/> to verify page refresh\.)
      styles []       = .text;
   }
    : pattern {
      regex          \= (Expecting no redirect: on page \[[^\]]*\])
      styles []       = .text;
   }
    : pattern {
      regex          \= (Using chromedriver )([0-9.]*)( .*)
      styles []       = .text, .decorator, .text;
   }
    : pattern {
      regex          \= (Exporting webdriver.chrome.drive.*)
      styles []       = .text;
   }
    : pattern {
      regex          \= (Opening url \[)(.*)(\] with capablities: )(.*)
      styles []       = .text, .decorator, .text, .decorator;
   }
    : pattern {
      regex          \= (Assert|Execute|Find)( wait for | wait and refresh for )?([^:]*: )([a-zA-Z]*: ?)?$${__ELEMENT_DISP}
      styles []       = .component, .decorator, .keyword, .text, .elem_disp, .text, .keyword, .text;
   }
    : pattern {
      regex          \= (Assert|Execute|Find)( wait for | wait and refresh for )?([^:]*: )([a-zA-Z]*:)( to |, )?$${__ELEMENT_DISP}
      styles []       = .component, .decorator, .keyword, .text,  .text, .elem_disp, .text, .keyword, .text;
   }
    : pattern {
      regex          \= (Assert|Execute|Find)( wait for | wait and refresh for )?([^:]*: )([a-zA-Z]*:)?(\[)(.*)(\])( to |, )$${__ELEMENT_DISP}
      styles []       = .component, .decorator, .keyword, .text, .text, .string, .text, .text, .elem_disp, .text, .keyword, .text;
   }
    : pattern {
      regex          \= (Assert|Execute|Find)( wait for | wait and refresh for )?([^:]*: )(\[)(.*)(\])
      styles []       = .component, .decorator, .keyword, .text, .string, .text;
   }
    : pattern {
      regex          \= $${__ELEMENT_DISP}
      styles []       = .elem_disp, .text, .keyword, .text;
   }
    : pattern {
      regex          \= (Assert)( wait for | wait and refresh for)?( \[)(.*)(\] )([a-zA-Z0-9 ]*)( \[)(.*)(\])
      styles []       = .component, .decorator, .text, .string, .text, .keyword, .text, .string, .text;
   }
    : pattern {
      regex          \= (Assert)( \[)(.*)(\] )(is empty)
      styles []       = .component, .text, .string, .text, .keyword;
   }
    : pattern {
      regex          \= (Storing)(: key:\[)(.*)(\], value:\[)(.*)(\])
      styles []       = .component, .text, .string, .text, .string, .text;
   }
    : pattern {
      regex          \= (Assert Loading)(: key:\[)(.*)(\], value:\[)(.*)(\])
      styles []       = .component, .text, .string, .text, .string, .text;
   }
    : pattern {
      regex          \= (Assert Removing)(: key:\[)(.*)(\], value:\[)(.*)(\])
      styles []       = .component, .text, .string, .text, .string, .text;
   }
    : pattern {
      regex          \= (Test Failure:|org.pagemodel.web.utils.PageException:)
      styles []       = .illegal;
   }
    : pattern {
      regex          \= (^\s*at)( )(org\.openqa|org\.gradle|org\.junit|java|sun|com.sun)(\.[a-zA-Z0-9\.$]*)(\()(.*|[a-zA-Z0-9]*\.java:[0-9]*)(\))
      styles []       = .illegal, .comment, .comment, .comment, .comment, .comment, .comment;
   }
    : pattern {
      regex          \= (^\s*at)( )(org\.pagemodel)(\.[a-zA-Z0-9\.$]*)(\()(.*|[a-zA-Z0-9]*\.java)(:)([0-9]*)(\))
      styles []       = .illegal, .text, .text, .text, .text, .keyword, .text, .numeric, .text;
   }
    : pattern {
      regex          \= (^\s*at)( [a-zA-Z0-9.$]*)(\()(.*|[a-zA-Z0-9]*\.java)(:)([0-9]*)(\))
      styles []       = .illegal, .decorator, .text, .keyword, .text, .numeric, .text;
   }
    : pattern {
      regex          \= (Executing)( SSH command )(\[)(.*)(\])
      styles []       = .component, .keyword, .text, .string, .text;
   }
    : pattern {
      regex          \= (Connecting to SSH.*)
      styles []       = .text;
   }
    : pattern {
      regex          \= (Disconnecting from SSH.*)
      styles []       = .text;
   }
    : pattern {
      regex          \= (SSH )([a-zA-Z0-9 .,]*)
      styles []       = .text, .decorator;
   }
    : pattern {
      regex          \= (ChromeDriver was started successfully.)
      styles []       = .text;
   }
    : pattern {
      regex          \= (.*org.openqa.selenium.remote.ProtocolHandshake.*)
      styles []       = .text;
   }
    : pattern {
      regex          \= (INFO: Detected dialect: W3C)
      styles []       = .text;
   }
}
#################################################
## End of Contexts
#################################################
###########################################
## Numeric Context
###########################################
numeric : context {
   : pattern {
      regex          \= (\b\d+)
      styles []       = .numeric;
   }
}
}